<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
        xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0">

        <!-- reference to casisp.cfg -->
        <cm:property-placeholder persistent-id="casisp" />

	<!-- reference to aggregation strategies -->
        <bean id="groupedExchange" class="org.apache.camel.processor.aggregate.GroupedExchangeAggregationStrategy" />
        <bean id="useLatest" class="org.apache.camel.processor.aggregate.UseLatestAggregationStrategy" />

        <!-- reference to ExchangeListProcessor -->
        <bean id="exchangeListProcessor" class="de.ag.cas.casisp.exchangelistprocessor.ExchangeListProcessor" />

        <!-- reference to sslContextParameters -->
        <sslContextParameters id="sslContextParameters" xmlns="http://camel.apache.org/schema/blueprint">
                <keyManagers keyPassword="{{casisp.keyPassword}}">
                        <keyStore resource="file:{{karaf.home}}/etc/{{casisp.keystoreName}}" password="{{casisp.keystorePassword}}" />
                </keyManagers>
                <trustManagers>
                        <keyStore resource="file:{{karaf.home}}/etc/{{casisp.truststoreName}}" password="{{casisp.truststorePassword}}" />
                </trustManagers>
        </sslContextParameters>

        <!-- set reference to the ActiveMQ JMS connection factory -->
        <reference id="activemqProducer0" interface="javax.jms.ConnectionFactory" />

        <camelContext id="isp.route.system.deployment.service" xmlns="http://camel.apache.org/schema/blueprint" streamCache="true">

                <route id="isp.route.system.deployment.service">

                        <from uri="direct-vm:isp.route.system.deployment.service" />
                        <log message="isp.route.system.deployment.service - Route started" />

                        <setProperty name="serviceId"><jsonpath>$.serviceId</jsonpath></setProperty>
			<log message="serviceId: ${exchangeProperty.serviceId}" />

			<setProperty name="serviceName"><jsonpath>$.serviceName</jsonpath></setProperty>
                        <setProperty name="remoteService"><jsonpath>$.remoteService</jsonpath></setProperty>

                        <!-- convert the body into a Hashmap and add the body to the claim check stack for later use -->
                        <setBody><jsonpath>$</jsonpath></setBody>
                        <claimCheck operation="Set" key="inBody" />

                        <!-- split array of consumers -->
                        <split streaming="true" aggregationStrategy="groupedExchange">
                                <jsonpath suppressExceptions="true">$.consumer[*]</jsonpath>
                                <setProperty name="consumerType"><jsonpath>$.consumerType</jsonpath></setProperty>
                                <log message="consumerType: ${header.consumerType}" />

                                <!-- process the consumer velocity template -->
                                <toD uri="velocity:file:{{karaf.home}}/templates/consumer/${header.consumerType}.vm?contentCache=false&amp;allowContextMapAll=true" />
                        </split>

                        <!-- set consumerComponents property -->
                        <choice>
                                <when>
                                        <simple>${body.class().toString()} contains 'GroupedExchangeList'</simple>

                                        <bean ref="exchangeListProcessor" />
                                        <setProperty name="consumerComponents"><simple>${body}</simple></setProperty>
                                </when>
                        </choice>

                        <!-- get the body from the claim check stack -->
                        <claimCheck operation="Get" key="inBody" />

                        <!-- split array of consumers for context configuration -->
                        <split streaming="true" aggregationStrategy="groupedExchange">
                                <jsonpath suppressExceptions="true">$.consumer[*]</jsonpath>
                                <setProperty name="consumerType"><jsonpath>$.consumerType</jsonpath></setProperty>

                                <!-- process the consumer velocity template -->
                                <setProperty name="contextObject"><jsonpath suppressExceptions="true">$.*.context</jsonpath></setProperty>

                                <choice>
                                        <when>
                                                <simple>${exchangeProperty.contextObject?.toString()} != '[]'</simple>

                                                <toD uri="velocity:file:{{karaf.home}}/templates/consumer/context/${header.consumerType}.vm?contentCache=false&amp;allowContextMapAll=true" />
                                        </when>
                                </choice>
                        </split>

                        <!-- set consumerComponents context property -->
                        <choice>
                                <when>
                                        <simple>${body.class().toString()} contains 'GroupedExchangeList'</simple>

                                        <bean ref="exchangeListProcessor" />
                                        <setProperty name="consumerContextElements"><simple>${body}</simple></setProperty>
                                </when>
                        </choice>

                        <!-- get the body from the claim check stack -->
                        <claimCheck operation="Get" key="inBody" />

                        <!-- split array of consumers for blueprint configuration -->
                        <split streaming="true" aggregationStrategy="groupedExchange">
                                <jsonpath suppressExceptions="true">$.consumer[*]</jsonpath>
                                <setProperty name="consumerType"><jsonpath>$.consumerType</jsonpath></setProperty>

                                <!-- process the consumer velocity template -->
                                <setProperty name="blueprintObject"><jsonpath suppressExceptions="true">$.*.blueprint</jsonpath></setProperty>

                                <choice>
                                        <when>
                                                <simple>${exchangeProperty.blueprintObject?.toString()} != '[]'</simple>

                                                <toD uri="velocity:file:{{karaf.home}}/templates/consumer/blueprint/${header.consumerType}.vm?contentCache=false&amp;allowContextMapAll=true" />
                                        </when>
                                </choice>
                        </split>

                        <!-- set consumerComponents blueprint property -->
                        <choice>
                                <when>
                                        <simple>${body.class().toString()} contains 'GroupedExchangeList'</simple>

                                        <bean ref="exchangeListProcessor" />
                                        <setProperty name="consumerBlueprintElements"><simple>${body}</simple></setProperty>
                                </when>
                        </choice>

                        <!-- get the body from the claim check stack -->
                        <claimCheck operation="Get" key="inBody" />

                        <!-- split array of consumers for exception configuration -->
                        <split streaming="true" aggregationStrategy="groupedExchange">
                                <jsonpath suppressExceptions="true">$.consumer[*]</jsonpath>
                                <setProperty name="consumerType"><jsonpath>$.consumerType</jsonpath></setProperty>

                                <!-- process the consumer velocity template -->
                                <setProperty name="exceptionObject"><jsonpath suppressExceptions="true">$.*.exception</jsonpath></setProperty>

                                <choice>
                                        <when>
                                                <simple>${exchangeProperty.exceptionObject?.toString()} != '[]'</simple>

                                                <toD uri="velocity:file:{{karaf.home}}/templates/consumer/exception/${header.consumerType}.vm?contentCache=false&amp;allowContextMapAll=true" />
                                        </when>
                                </choice>
                        </split>

                        <!-- set consumerComponents exception property -->
                        <choice>
                                <when>
                                        <simple>${body.class().toString()} contains 'GroupedExchangeList'</simple>

                                        <bean ref="exchangeListProcessor" />
                                        <setProperty name="consumerExceptionElements"><simple>${body}</simple></setProperty>
                                </when>
                        </choice>

                        <!-- get the body from the claim check stack -->
                        <claimCheck operation="Get" key="inBody" />

                        <!-- split array of consumers for etc configuration -->
                        <split streaming="true" aggregationStrategy="groupedExchange">
                                <jsonpath suppressExceptions="true">$.consumer[*]</jsonpath>
                                <setProperty name="consumerType"><jsonpath>$.consumerType</jsonpath></setProperty>

                                <!-- process the consumer velocity template -->
                                <setProperty name="etcObject"><jsonpath suppressExceptions="true">$.*.etc</jsonpath></setProperty>
                                <setProperty name="fileCreateFlag"><jsonpath suppressExceptions="true">$.*.etc.fileCreateFlag</jsonpath></setProperty>
                                <setProperty name="filePrefix"><jsonpath suppressExceptions="true">$.*.etc.filePrefix</jsonpath></setProperty>
                                <setProperty name="etcBody"><simple>${body}</simple></setProperty>
                                <setBody><simple>${exchangeProperty.filePrefix}</simple></setBody>

                                <!-- split array filePrefix -->
                                <split streaming="true" aggregationStrategy="groupedExchange">
                                        <jsonpath suppressExceptions="true">$</jsonpath>
                                        <setProperty name="filePrefix"><simple>${body}</simple></setProperty>

                                        <choice>
                                                <when>
                                                        <simple>${exchangeProperty.fileCreateFlag?.toString()} == '[true]'</simple>
                                                        <log message="header.consumerType: ${header.consumerType}" />

                                                        <setBody><simple>${exchangeProperty.etcBody}</simple></setBody>
                                                        <toD uri="velocity:file:{{karaf.home}}/templates/consumer/etc/${header.consumerType}.vm?contentCache=false&amp;allowContextMapAll=true" />

                                                        <choice>
                                                                <when>
                                                                        <simple>${exchangeProperty.filePrefix?.toString().length} > 0</simple>

                                                                        <setProperty name="fileName"><simple>${exchangeProperty.filePrefix}.${exchangeProperty.serviceId}.cfg</simple></setProperty>
                                                                </when>
                                                                <otherwise>
                                                                        <setProperty name="fileName"><simple>${exchangeProperty.serviceId}.cfg</simple></setProperty>
                                                                </otherwise>
                                                        </choice>

                                                        <choice>
                                                                <when>
                                                                        <simple>${exchangeProperty.remoteService}</simple>

                                                                        <setBody><simple>${exchangeProperty.etcBody}</simple></setBody>

                                                                        <!-- write to control queue -->
                                                                        <setHeader name="directoryName"><constant>etc</constant></setHeader>
									<setHeader name="fileName"><simple>${exchangeProperty.fileName}</simple></setHeader>

                                                                        <setBody>
                                                                                <groovy>
                                                                                        def payload = exchange.getIn().getBody()
                                                                                        response = payload.bytes.encodeBase64().toString()
                                                                                </groovy>
                                                                        </setBody>


									<setBody>
                                                                                <simple>
                                                                                {
                                                                                        "remoteServiceId": "${exchangeProperty.serviceId}",
                                                                                        "remoteServiceName": "${exchangeProperty.serviceName}",
                                                                                        "active": false,
                                                                                        "directoryName": "etc",
                                                                                        "fileName": "${exchangeProperty.fileName}"
                                                                                        "payload": "${body}"
                                                                                }
                                                                                </simple>
                                                                        </setBody>

                                                                        <!-- set HTTP header values and filter body -->
                                                                        <setHeader name="CamelHttpMethod"><constant>POST</constant></setHeader>
                                                                        <setHeader name="Content-Type"><constant>application/json</constant></setHeader>
                                                                        <setHeader name="Authorization"><constant>{{casisp.casrdh.authorization}}</constant></setHeader>

                                                                        <!-- POST Integration Service data -->
                                                                        <to uri='{{casisp.casrdh.url}}/api/v1/entity/remoteintegrationservice/upsert?sslContextParameters=#sslContextParameters'/>
                                                                </when>
                                                                <otherwise>
                                                                        <to uri="file:{{karaf.home}}/etc?fileName=${exchangeProperty.fileName}" />
                                                                </otherwise>
                                                        </choice>
                                                </when>
                                        </choice>
                                </split>

                        </split>

                        <!-- get the body from the claim check stack -->
                        <claimCheck operation="Get" key="inBody" />

                        <!-- split array of processors -->
                        <split streaming="true" aggregationStrategy="groupedExchange">
                                <jsonpath suppressExceptions="true">$.processor[*]</jsonpath>
                                <setProperty name="processorType"><jsonpath>$.processorType</jsonpath></setProperty>
                                <setProperty name="camelSplitIndex"><simple>${header.CamelSplitIndex}</simple></setProperty>
                                <log message="processorType: ${header.processorType}" />

                                <!-- process the processor velocity template -->
                                <toD uri="velocity:file:{{karaf.home}}/templates/processor/${header.processorType}.vm?contentCache=false&amp;allowContextMapAll=true" />
                        </split>

                        <!-- set processorComponents property -->
                        <choice>
                                <when>
                                        <simple>${body.class().toString()} contains 'GroupedExchangeList'</simple>

                                        <bean ref="exchangeListProcessor" />
                                        <setProperty name="processorComponents"><simple>${body}</simple></setProperty>
                                </when>
                        </choice>

                        <!-- get the body from the claim check stack -->
                        <claimCheck operation="Get" key="inBody" />

                        <!-- split array of processors for context configuration -->
                        <split streaming="true" aggregationStrategy="groupedExchange">
                                <jsonpath suppressExceptions="true">$.processor[*]</jsonpath>
                                <setProperty name="processorType"><jsonpath>$.processorType</jsonpath></setProperty>
                                <setProperty name="camelSplitIndex"><simple>${header.CamelSplitIndex}</simple></setProperty>

                                <!-- process the processor velocity template -->
                                <setProperty name="contextObject"><jsonpath suppressExceptions="true">$.*.context</jsonpath></setProperty>

                                <choice>
                                        <when>
                                                <simple>${exchangeProperty.contextObject?.toString()} != '[]'</simple>

                                                <toD uri="velocity:file:{{karaf.home}}/templates/processor/context/${header.processorType}.vm?contentCache=false&amp;allowContextMapAll=true" />
                                        </when>
                                </choice>
                        </split>

                        <!-- set processorComponents context property -->
                        <choice>
                                <when>
                                        <simple>${body.class().toString()} contains 'GroupedExchangeList'</simple>

                                        <bean ref="exchangeListProcessor" />
                                        <setProperty name="processorContextElements"><simple>${body}</simple></setProperty>
                                </when>
                        </choice>

                        <!-- get the body from the claim check stack -->
                        <claimCheck operation="Get" key="inBody" />

                        <!-- split array of processors for blueprint configuration -->
                        <split streaming="true" aggregationStrategy="groupedExchange">
                                <jsonpath suppressExceptions="true">$.processor[*]</jsonpath>
                                <setProperty name="processorType"><jsonpath>$.processorType</jsonpath></setProperty>
                                <setProperty name="camelSplitIndex"><simple>${header.CamelSplitIndex}</simple></setProperty>

                                <!-- process the processor velocity template -->
                                <setProperty name="blueprintObject"><jsonpath suppressExceptions="true">$.*.blueprint</jsonpath></setProperty>

                                <choice>
                                        <when>
                                                <simple>${exchangeProperty.blueprintObject?.toString()} != '[]'</simple>

                                                <toD uri="velocity:file:{{karaf.home}}/templates/processor/blueprint/${header.processorType}.vm?contentCache=false&amp;allowContextMapAll=true" />
                                        </when>
                                </choice>
                        </split>

                        <!-- set processorComponents blueprint property -->
                        <choice>
                                <when>
                                        <simple>${body.class().toString()} contains 'GroupedExchangeList'</simple>

                                        <bean ref="exchangeListProcessor" />
                                        <setProperty name="processorBlueprintElements"><simple>${body}</simple></setProperty>
                                </when>
                        </choice>

                        <!-- get the body from the claim check stack -->
                        <claimCheck operation="Get" key="inBody" />

                        <!-- split array of producers for components -->
                        <split streaming="true" aggregationStrategy="groupedExchange">
                                <jsonpath suppressExceptions="true">$.producer[*]</jsonpath>
                                <setProperty name="producerType"><jsonpath>$.producerType</jsonpath></setProperty>
                                <setProperty name="camelSplitIndex"><simple>${header.CamelSplitIndex}</simple></setProperty>
                                <log message="producerType: ${header.producerType}" />

                                <!-- process the producer velocity template -->
                                <toD uri="velocity:file:{{karaf.home}}/templates/producer/${header.producerType}.vm?contentCache=false&amp;allowContextMapAll=true" />
                        </split>

                        <!-- set producerComponents property -->
                        <choice>
                                <when>
                                        <simple>${body.class().toString()} contains 'GroupedExchangeList'</simple>

                                        <bean ref="exchangeListProcessor" />
                                        <setProperty name="producerComponents"><simple>${body}</simple></setProperty>
                                </when>
                        </choice>

                        <!-- get the body from the claim check stack -->
                        <claimCheck operation="Get" key="inBody" />

                        <!-- split array of producers for context configuration -->
                        <split streaming="true" aggregationStrategy="groupedExchange">
                                <jsonpath suppressExceptions="true">$.producer[*]</jsonpath>
                                <setProperty name="producerType"><jsonpath>$.producerType</jsonpath></setProperty>
                                <setProperty name="camelSplitIndex"><simple>${header.CamelSplitIndex}</simple></setProperty>

                                <!-- process the producer velocity template -->
                                <setProperty name="contextObject"><jsonpath suppressExceptions="true">$.*.context</jsonpath></setProperty>

                                <choice>
                                        <when>
                                                <simple>${exchangeProperty.contextObject?.toString()} != '[]'</simple>

                                                <toD uri="velocity:file:{{karaf.home}}/templates/producer/context/${header.producerType}.vm?contentCache=false&amp;allowContextMapAll=true" />
                                        </when>
                                </choice>
                        </split>

                        <!-- set producerComponents context property -->
                        <choice>
                                <when>
                                        <simple>${body.class().toString()} contains 'GroupedExchangeList'</simple>

                                        <bean ref="exchangeListProcessor" />
                                        <setProperty name="producerContextElements"><simple>${body}</simple></setProperty>
                                </when>
                        </choice>

                        <!-- get the body from the claim check stack -->
                        <claimCheck operation="Get" key="inBody" />

                        <!-- split array of producers for blueprint configuration -->
                        <split streaming="true" aggregationStrategy="groupedExchange">
                                <jsonpath suppressExceptions="true">$.producer[*]</jsonpath>
                                <setProperty name="producerType"><jsonpath>$.producerType</jsonpath></setProperty>
                                <setProperty name="camelSplitIndex"><simple>${header.CamelSplitIndex}</simple></setProperty>
                                <log message="CamelSplitIndex: ${exchangeProperty.CamelSplitIndex}" />

                                <!-- process the producer velocity template -->
                                <setProperty name="blueprintObject"><jsonpath suppressExceptions="true">$.*.blueprint</jsonpath></setProperty>

                                <choice>
                                        <when>
                                                <simple>${exchangeProperty.blueprintObject?.toString()} != '[]'</simple>

                                                <toD uri="velocity:file:{{karaf.home}}/templates/producer/blueprint/${header.producerType}.vm?contentCache=false&amp;allowContextMapAll=true" />
                                        </when>
                                </choice>
                        </split>

                        <!-- set producerComponents blueprint property -->
                        <choice>
                                <when>
                                        <simple>${body.class().toString()} contains 'GroupedExchangeList'</simple>

                                        <bean ref="exchangeListProcessor" />
                                        <setProperty name="producerBlueprintElements"><simple>${body}</simple></setProperty>
                                </when>
                        </choice>

                        <!-- get the body from the claim check stack -->
                        <claimCheck operation="Get" key="inBody" />

                        <!-- process the route velocity template -->
                        <toD uri="velocity:file:{{karaf.home}}/templates/route/route.vm?contentCache=false&amp;allowContextMapAll=true" />

                        <choice>
                                <when>
                                        <simple>${exchangeProperty.remoteService}</simple>

					<!-- write to control queue -->
                                        <setHeader name="directoryName"><constant>deploy</constant></setHeader>
                                        <setHeader name="fileName"><simple>isp.route.${exchangeProperty.serviceId}.xml</simple></setHeader>

					<setBody>
                                                <groovy>
                                                        def payload = exchange.getIn().getBody()
                                                        response = payload.bytes.encodeBase64().toString()
                                                </groovy>
                                        </setBody>

                                        <setBody>
                                                <simple>
                                                {
                                                        "remoteServiceId": "${exchangeProperty.serviceId}",
                                                        "remoteServiceName": "${exchangeProperty.serviceName}",
                                                        "active": false,
                                                        "directoryName": "deploy",
                                                        "fileName": "isp.route.${exchangeProperty.serviceId}.xml",
                                                        "payload": "${body}"
                                                }
                                                </simple>
					</setBody>

					<!-- set HTTP header values and filter body -->
                                        <setHeader name="CamelHttpMethod"><constant>POST</constant></setHeader>
                                        <setHeader name="Content-Type"><constant>application/json</constant></setHeader>
                                        <setHeader name="Authorization"><constant>{{casisp.casrdh.authorization}}</constant></setHeader>

                                        <!-- POST Integration Service data -->
					<to uri='{{casisp.casrdh.url}}/api/v1/entity/remoteintegrationservice/upsert?sslContextParameters=#sslContextParameters' />
                                </when>
                                <otherwise>
                                        <!-- write the route to the deploy folder -->
                                        <to uri="file:{{karaf.home}}/deploy?fileName=isp.route.${exchangeProperty.serviceId}.xml" />
                                </otherwise>
                        </choice>

                        <!-- get the body from the claim check stack -->
                        <claimCheck operation="Get" key="inBody" />

                        <setProperty name="serviceId"><jsonpath>$.serviceId</jsonpath></setProperty>
                        <setBody><simple>{"responseCode": 200, "responseMessage": "Service model '${exchangeProperty.serviceId}' successfully parsed and deployment initiated."}\n\r</simple></setBody>
                        <log message="isp.route.system.deployment.service - Route finished" />
                </route>

        </camelContext>

</blueprint>
